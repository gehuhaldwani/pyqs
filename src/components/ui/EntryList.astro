---
import type { Entry } from "@/types/content";
import { toTitleCase } from "@/utils/string";
import { addForwardSlashAndBaseUrl } from "@/utils/url";
import { comparePyqs, getPyqDateString, getPyqTitle } from "@/utils/pyqs";
import Button from "../starwind/button";
import Item from "@/components/starwind/item";
import { Icon } from "astro-icon/components";

interface Props {
	title: string;
	path: string;
	entries: Entry[];
	capitalize?: boolean;
}

const { entries, capitalize = false, path, title } = Astro.props;

const dirs: Entry[] = entries.filter((entry: Entry) => entry.type === "dir");
const pdfs: Entry[] = entries.filter((entry: Entry) => entry.type === "pdf");
const urls: Entry[] = entries.filter((entry: Entry) => entry.type === "url");
const files: Entry[] = entries.filter((entry: Entry) => entry.type === "file");

pdfs.sort((a: Entry, b: Entry) => {
	if (a.pyq && b.pyq === null) return -1;
	if (a.pyq === null && b.pyq) return 1;
	if (a.pyq === null && b.pyq === null) return 0;
	// biome-ignore lint/style/noNonNullAssertion: <explanation>
	return -1 * comparePyqs(a.pyq!, b.pyq!);
});

function getDirTitle(title: string, capitalize: boolean) {
	return capitalize || ["OTHERS", "OLD", "END", "MID"].includes(title)
		? title
		: toTitleCase(title);
}
---

<div class="[&>*:not(:first-child)]:mt-4">
	{
		dirs.length > 0 && (
			<Item.Group>
				{dirs.map((dir) => (
					<>
						<Item.Root
							as="a"
							href={addForwardSlashAndBaseUrl(dir.path)}
						>
							<Item.Media variant="image">
								<Icon
									name="folder"
									width={32}
									height={32}
									class:list={
										dir.title === "OTHERS" ||
										dir.title === "OLD"
											? "text-gray-500"
											: "text-[#F5B800]"
									}
								/>
							</Item.Media>
							<Item.Content>
								<Item.Title>
									{getDirTitle(
										dir.title.toUpperCase(),
										capitalize,
									)}
								</Item.Title>
							</Item.Content>
						</Item.Root>
						<Item.Separator />
					</>
				))}
			</Item.Group>
		)
	}

	{
		pdfs.length > 0 && (
			<Item.Group>
				{pdfs.map((pdf) => (
					<>
						<Item.Root
							as="a"
							href={addForwardSlashAndBaseUrl(pdf.path).replace(
								".pdf",
								"",
							)}
						>
							<Item.Media variant="image">
								<Icon
									name="pdf"
									width={32}
									height={32}
									class:list={"text-red-500"}
								/>
							</Item.Media>
							<Item.Content>
								<Item.Title>{getPyqTitle(pdf.pyq!)}</Item.Title>
								<Item.Description>
									{getPyqDateString(pdf.pyq!)}
								</Item.Description>
							</Item.Content>
						</Item.Root>
						<Item.Separator />
					</>
				))}
			</Item.Group>
		)
	}

	{
		urls.length > 0 && (
			<Item.Group>
				{urls.map((url) => (
					<>
						<Item.Root
							as="a"
							href={url.path}
							title={url.title}
							target="_blank"
						>
							<Item.Media variant="image">
								<Icon
									name="url"
									width={32}
									height={32}
									class:list={"text-blue-500"}
								/>
							</Item.Media>
							<Item.Content>
								<Item.Title>{url.title}</Item.Title>
							</Item.Content>
						</Item.Root>
						<Item.Separator />
					</>
				))}
			</Item.Group>
		)
	}

	{
		pdfs.length > 0 && (
			<div class="flex justify-center">
				<Button
					href={`https://pyqs-uploader.pages.dev/?path=${path}&title=${title}`}
					target="_blank"
					class="h-full"
					variant="default"
				>
					<p class="break-words whitespace-normal text-center">
						Upload PYQs to <span class="font-bold">{title}</span>
					</p>
				</Button>
			</div>
		)
	}
</div>
